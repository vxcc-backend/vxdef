
let empty-ident(): Ident = (
    mk-vector(type(CString),0)
);

let parse-ident(toks: List<CString>): Tuple<List<CString>, Ident> = (
    let out = mk-vector(type(CString), 4);

    out = out.push(head(toks));
    toks = tail(toks);

    while head(toks) == "::" {
        toks = tail(toks);
        out = out.push(head(toks));
        toks = tail(toks);
    };

    Tuple { toks, out }
);

let deep-hash(val: Vector<CString>): U64 = (
    let last = val.length() - 1;
    deep-hash(val[last])
);

let parse-type(file-path: String, toks: List<CString>): Tuple<List<CString>, TypeSpec> = (
    let out = match intern(head(toks)) {
        "?" => (
            toks = tail(toks);
            let x = parse-type(file-path, toks);
            toks = x.first;
            match x.second {
                OptionalTypeSpec {} => (
                    fail("Can't have optional of optional (in file \{file-path})");
                );
                rest => ();
            };
            OptionalTypeSpec { close(x.second) }
        );

        "[" => (
            toks = tail(toks);

            let x = parse-type(file-path, toks);
            toks = x.first;

            expect(file-path, head(toks), "]");
            toks = tail(toks);

            ArrayTypeSpec { close(x.second) }
        );

        rest => (
            let x = parse-ident(toks);
            toks = x.first;
            IdentTypeSpec { x.second }
        );
    };

    while head(toks) == "*" {
        toks = tail(toks);
        out = PtrTypeSpec { close(out) };
    };

    Tuple { toks, out }
);

let parse-member-spec(file-path: String, toks: List<CString>): Tuple<List<CString>, MemberSpec> = (
    let v0 = parse-type(file-path, toks);
    toks = v0.first;
    let typ = v0.second;

    let name = head(toks);
    toks = tail(toks);

    let default = None :: Maybe<Expr[]>;
    if head(toks) == "=" {
        toks = tail(toks);

        let x = parse-expr(file-path, toks);
        toks = x.first;

        default = Some { close(x.second) };
    };

    let ms = MemberSpec { close(typ), name, default };
    Tuple { toks, ms }
);

# parses: (int a, int b, int c = 2, int d)
let parse-members(file-path: String, toks: List<CString>): Tuple<List<CString>, Vector<MemberSpec[]>> = (
    let out = mk-vector(type(MemberSpec[]), 4);

    expect(file-path, head(toks), "(");
    toks = tail(toks);

    let loop = true;
    while loop {
        if head(toks) == ")" {
            loop = false;
        } else {
            let ms = parse-member-spec(file-path, toks);
            toks = ms.first;
            out = out.push(close(ms.second));

            if head(toks) != "," {
                loop = false;
            } else {
                toks = tail(toks);
            };
        };
    };

    expect(file-path, head(toks), ")");
    toks = tail(toks);

    Tuple { toks, out }
);

let expect(file-path: String, actual: CString, expected: t): Nil = (
    if actual != expected {
        fail("Expected \{expected}, but got \{actual} (In File: \{file-path})");
    };
);

let parse-expr-atom(file-path: String, toks: List<CString>): Tuple<List<CString>, Expr> = (
    let e = match intern(head(toks)) {
        "\"".. rest => (
            let v = head(toks);
            toks = tail(toks);
            StrExpr { v }
        );

        (num=r/^[0-9]+/).. rest => (
            let v = head(toks);
            toks = tail(toks);
            NumExpr { to-i64(v) }
        );

        "null" => (
            toks = tail(toks);
            NullExpr {}
        );

        "$" => (
            toks = tail(toks);
            CurrElemRefExpr {}
        );

        "each" => (
            toks = tail(toks);

            let arr = parse-expr(file-path, toks);
            toks = arr.first;

            expect(file-path, head(toks), ":");
            toks = tail(toks);

            let do = parse-expr(file-path, toks);
            toks = do.first;

            EachExpr { close(arr.second), close(do.second) }
        );

        "(" => (
            toks = tail(toks);

            let inner = parse-expr(file-path, toks);
            toks = inner.first;

            expect(file-path, head(toks), ")");
            toks = tail(toks);

            inner.second
        );

        "[" => (
            toks = tail(toks);

            let arr = mk-vector(type(Expr[]), 4);

            let loop = true;
            while loop {
                if head(toks) == "]" {
                    loop = false;
                } else {
                    let ex = parse-expr(file-path, toks);
                    toks = ex.first;
                    arr = arr.push(close(ex.second));

                    if head(toks) != "," {
                        loop = false;
                    } else {
                        toks = tail(toks);
                    };
                };
            };

            expect(file-path, head(toks), "]");
            toks = tail(toks);

            ArrExpr { arr }
        );

        (id=r/^[a-zA-Z0-9_]+/).. rest => (
            let i = parse-ident(toks);
            toks = i.first;

            IdentExpr { i.second }
        );

        rest => ( fail("Unexpected Token. Expected expression atom (in File \{file-path}): \{head(toks)}"); );
    };
    Tuple { toks, e }
);

let parse-expr(file-path: String, toks: List<CString>): Tuple<List<CString>, Expr> = (
    let v0 = parse-expr-atom(file-path, toks);
    toks = v0.first;
    let val = v0.second;

    # parse left associative operators
    let loop = true;
    while loop {
        match intern(head(toks)) {
            "." => (
                toks = tail(toks);
                let name = head(toks);
                toks = tail(toks);
                val = MemberExpr { close(val), name };
            );

            "(" => (
                let a = parse-call-args(file-path, toks);
                toks = a.first;
                val = CallExpr { close(val), a.second };
            );

            "[" => (
                toks = tail(toks);

                let e = parse-expr(file-path, toks);
                toks = e.first;

                expect(file-path, head(toks), "]");
                toks = tail(toks);

                val = IdxExpr { close(val), close(e.second) };
            );

            rest => (
                loop = false;
            );
        };
    };

    Tuple { toks, val }
);

let empty-arglist(): ArgList = (
    ArgList {
        mk-vector(type(Expr[]), 4),
        HashtableEqEOF :: HashtableEq<CString, Expr[]>
    }
);

# parses: (1,2,3,4,name="hi",val=9)
let parse-call-args(file-path: String, toks: List<CString>): Tuple<List<CString>, ArgList> = (
    expect(file-path, head(toks), "(");
    toks = tail(toks);

    let out = empty-arglist();

    let allows_positional = true;
    let loop = true;
    while loop {
        if head(toks) == ")" {
            loop = false;
        } else {
            if head(tail(toks)) == "=" {
                allows_positional = false;

                let name = head(toks);
                toks = tail(tail(toks));

                let e = parse-expr(file-path, toks);
                toks = e.first;

                out.named[name] = close(e.second);
            } else {
                if not(allows_positional) {
                    fail("You can't use positional arguments after having a named argument! (In File: \{file-path})");
                };

                let e = parse-expr(file-path, toks);
                toks = e.first;
                out.positional = out.positional.push(close(e.second));
            };

            if head(toks) != "," {
                loop = false;
            } else {
                toks = tail(toks);
            };
        };
    };

    expect(file-path, head(toks), ")");
    toks = tail(toks);

    Tuple { toks, out }
);

# parses: Op + AwesomeOp + NiceOp
let parse-combine-classes(file-path: String, toks: List<CString>): Tuple<List<CString>, Vector<Vector<CString>>> = (
    let out = mk-vector(type(Vector<CString>), 2);

    let loop = true;
    while loop {
        let i = parse-ident(toks);
        toks = i.first;
        out = out.push(i.second);

        if head(toks) == "+" {
            toks = tail(toks);
        } else {
            loop = false;
        };
    };

    Tuple { toks, out }
);

# parses: (HUMAN(true),ROBOT(false))
let parse-enum-members(file-path: String, toks: List<CString>): Tuple<List<CString>, HashtableEq<CString, ArgList[]>> = (
    let out = HashtableEqEOF :: HashtableEq<CString, ArgList[]>;

    expect(file-path, head(toks), "(");
    toks = tail(toks);

    let loop = true;
    while loop {
        if head(toks) == ")" {
            loop = false;
        } else {
            let name = head(toks);
            toks = tail(toks);

            let x = parse-call-args(file-path, toks);
            toks = x.first;

            let args = close(x.second);
            out[name] = args;

            if head(toks) != "," {
                loop = false;
            } else {
                toks = tail(toks);
            };
        };
    };

    expect(file-path, head(toks), ")");
    toks = tail(toks);

    Tuple { toks, out }
);

let str-tok-inner(tok: CString): String = (
    match intern(tok) {
        "\"" ..v .."\"" => (v);

        rest => (
            fail("Expected string token");
        );
    }
);

let parse(file-path: String, scope: Ident, is_ref: Bool, was_included: Bool, toks: List<CString>): Vector<Decl> = (
    let split-file-path = path-parse(untern(file-path));

    let out = mk-vector(type(Decl), 32);

    let pfx_virt = false :: U32;
    let pfx_extensible = false :: U32;
    let pfx_extension = false :: U32;
    let attribs = HashtableEqEOF :: HashtableEq<Vector<CString>, ArgList>;

    while toks.length() > 0 {
        match intern(head(toks)) {
            "[" => (
                toks = tail(toks);
                expect(file-path, head(toks), "[");
                toks = tail(toks);

                let i = parse-ident(toks);
                toks = i.first;

                if head(toks) == "(" {
                    let c = parse-call-args(file-path, toks);
                    toks = c.first;
                    attribs[i.second] = c.second;
                } else {
                    attribs[i.second] = empty-arglist();
                };

                expect(file-path, head(toks), "]");
                toks = tail(toks);
                expect(file-path, head(toks), "]");
                toks = tail(toks);
            );

            "include" => (
                if pfx_extensible || pfx_virt || pfx_extension || (attribs != HashtableEqEOF) {
                    fail("\"include_ref\" can't be virtual, extensible, extension or have attributes (in File \{file-path})");
                };

                toks = tail(toks);

                let stri = str-tok-inner(head(toks));
                toks = tail(toks);

                let include-path = path-rel(split-file-path, path-parse(untern(stri)));
                let decls = parse-file(to-smart-string(include-path), scope, false, true);

                for decl in decls.unsafe-iter() {
                    out = out.push(decl);
                };
            );

            "include_ref" => (
                if pfx_extensible || pfx_virt || pfx_extension || (attribs != HashtableEqEOF) {
                    fail("\"include_ref\" can't be virtual, extensible, extension or have attributes (in File \{file-path})");
                };

                toks = tail(toks);

                let stri = str-tok-inner(head(toks));
                toks = tail(toks);

                let include-path = path-rel(split-file-path, path-parse(untern(stri)));
                let decls = parse-file(to-smart-string(include-path), scope, true, true);

                for decl in decls.unsafe-iter() {
                    out = out.push(decl);
                };
            );

            "included_only" => (
                if pfx_extensible || pfx_virt || pfx_extension || (attribs != HashtableEqEOF) {
                    fail("\"included_only\" can't be virtual, extensible, extension or have attributes (in File \{file-path})");
                };

                if not(was_included) {
                    fail("file \{file-path} can't be compiled directly because it is included_only");
                };

                toks = tail(toks);
            );

            "scope" => (
                if pfx_extensible || pfx_virt || pfx_extension || (attribs != HashtableEqEOF) {
                    fail("scopes can't be virtual, extensible, extension or have attributes (in File \{file-path})");
                };

                toks = tail(toks);
                let i = parse-ident(toks);
                toks = i.first;
                scope = i.second;
            );

            "extensible" => (
                if pfx_extensible {
                    fail("Don't use extensible keyword twice (in File \{file-path})");
                };

                toks = tail(toks);
                pfx_extensible = true;
            );

            "virt" => (
                if pfx_virt {
                    fail("Don't use virt keyword twice (in File \{file-path})");
                };

                toks = tail(toks);
                pfx_virt = true;
            );

            "extension" => (
                if pfx_extension {
                    fail("Don't use extension keyword twice (in File \{file-path})");
                };

                toks = tail(toks);
                pfx_extension = true;
            );

            "class" => (
                toks = tail(toks);

                let i = parse-ident(toks);
                toks = i.first;
                let name = ((scope :: Ident) + (i.second :: Ident)) :: Ident;

                let m = parse-members(file-path, toks);
                toks = m.first;
                let members = m.second;

                let decl = if pfx_extension {
                    if pfx_virt {
                        fail("You can't have a \"virt extension\" (In file \{file-path})");
                    };

                    if pfx_extensible {
                        fail("You can't have a \"extensible extension\" LOL (In file \{file-path})");
                    };

                    expect(file-path, head(toks), ":");
                    toks = tail(toks);

                    let pi = parse-ident(toks);
                    toks = pi.first;

                    ClassExtDecl {
                        members,
                        pi.second
                    }
                } else {
                    let parent = None :: Maybe<Tuple<Ident, ArgList[]>>;
                    if head(toks) == ":" {
                        toks = tail(toks);

                        let pi = parse-ident(toks);
                        toks = pi.first;

                        let a = parse-call-args(file-path, toks);
                        toks = a.first;

                        parent = Some { Tuple { pi.second, close(a.second) } };
                    };

                    ClassDecl {
                        pfx_virt as U8,
                        pfx_extensible as U8,
                        members,
                        parent
                    }
                };

                out = out.push(Decl {
                    name,
                    attribs,
                    is_ref,
                    decl
                });

                pfx_virt = false;
                pfx_extensible = false;
                pfx_extension = false;
                attribs = HashtableEqEOF :: HashtableEq<Vector<CString>, ArgList>;
            );

            "enum" => (
                toks = tail(toks);

                let i = parse-ident(toks);
                toks = i.first;
                let name = ((scope :: Ident) + (i.second :: Ident)) :: Ident;

                let m = parse-enum-members(file-path, toks);
                toks = m.first;
                let members = m.second;

                if pfx_virt {
                    fail("You can't have a \"virt enum\" (In file \{file-path})");
                };

                let decl = if pfx_extension {
                    if pfx_extensible {
                        fail("You can't have a \"extensible extension\" LOL (In file \{file-path})");
                    };

                    expect(file-path, head(toks), ":");
                    toks = tail(toks);

                    let pi = parse-ident(toks);
                    toks = pi.first;

                    expect(file-path, head(toks), ":");
                    toks = tail(toks);

                    let ci = parse-combine-classes(file-path, toks);
                    toks = ci.first;

                    EnumExtDecl {
                        members,
                        pi.second,
                        ci.second
                    }
                } else {
                    expect(file-path, head(toks), ":");
                    toks = tail(toks);

                    let ci = parse-combine-classes(file-path, toks);
                    toks = ci.first;

                    EnumDecl {
                        members,
                        ci.second
                    }
                };

                out = out.push(Decl {
                    name,
                    attribs,
                    is_ref,
                    decl
                });

                pfx_virt = false;
                pfx_extensible = false;
                pfx_extension = false;
                attribs = HashtableEqEOF :: HashtableEq<Vector<CString>, ArgList>;
            );

            "let" => (
                toks = tail(toks);

                let i = parse-ident(toks);
                toks = i.first;
                let name = ((scope :: Ident) + (i.second :: Ident)) :: Ident;

                expect(file-path, head(toks), "=");
                toks = tail(toks);

                if pfx_virt || pfx_extensible || pfx_extension {
                    fail("You can't have a virtual, extensible or extension \"let\" (In file \{file-path})");
                };

                let expr = parse-expr(file-path, toks);
                toks = expr.first;

                let decl = ConstDecl { close(expr.second) };

                expect(file-path, head(toks), ";");
                toks = tail(toks);

                out = out.push(Decl {
                    name,
                    attribs,
                    is_ref,
                    decl
                });

                attribs = HashtableEqEOF :: HashtableEq<Vector<CString>, ArgList>;
            );

            "lut" => (
                if pfx_virt || pfx_extensible || pfx_extension {
                    fail("You can't have a virtual, extensible or extension look-up table (In file \{file-path})");
                };

                toks = tail(toks);

                let i = parse-ident(toks);
                toks = i.first;
                let name = ((scope :: Ident) + (i.second :: Ident)) :: Ident;

                expect(file-path, head(toks), ":");
                toks = tail(toks);

                let from = parse-type(file-path, toks);
                toks = from.first;

                expect(file-path, head(toks), "=>");
                toks = tail(toks);

                let to = parse-type(file-path, toks);
                toks = to.first;

                expect(file-path, head(toks), "{");
                toks = tail(toks);

                let default = None :: Maybe<Expr<[]>>;
                let cases = mk-vector(type(Tuple<Expr[], Expr[]>), 8);

                let had_comma = true;
                while head(toks) != "}" && had_comma {
                    if head(toks) == "_" {
                        toks = tail(toks);

                        expect(file-path, head(toks), "=>");
                        toks = tail(toks);

                        let rhs = parse-expr(file-path, toks);
                        toks = rhs.first;

                        if default.is-some() {
                            fail("you can only have one default case in a look-up table (In File \{file-path})");
                        };

                        default = Some { rhs };
                    } else {
                        let lhs = parse-expr(file-path, toks);
                        toks = lhs.first;

                        expect(file-path, head(toks), "=>");
                        toks = tail(toks);

                        let rhs = parse-expr(file-path, toks);
                        toks = rhs.first;

                        cases = cases.push(Tuple { lhs, rhs });
                    };

                    if head(toks) == "," {
                        toks = tail(toks);
                    } else {
                        had_comma = false;
                    };
                };

                expect(file-path, head(toks), "}");
                toks = tail(toks);

                let decl = LutDecl {
                    close(from.second),
                    close(to.second),
                    cases,
                    default
                };

                out = out.push(Decl {
                    name,
                    attribs,
                    is_ref,
                    decl
                });

                attribs = HashtableEqEOF :: HashtableEq<Vector<CString>, ArgList>;
            );

            rest => ( fail("Unexpected Token (in File \{file-path}): \{head(toks)}"); );
        }
    };
    out
);
